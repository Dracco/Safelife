#pragma checksum "D:\Dracco\Safelife\Web.SafeLife\WebSafeLife\Views\Agenda\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "67aee94f9bbee64ce71e10b7307f658c454dda6a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Agenda_Index), @"mvc.1.0.view", @"/Views/Agenda/Index.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Agenda/Index.cshtml", typeof(AspNetCore.Views_Agenda_Index))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Dracco\Safelife\Web.SafeLife\WebSafeLife\Views\_ViewImports.cshtml"
using WebSafeLife;

#line default
#line hidden
#line 2 "D:\Dracco\Safelife\Web.SafeLife\WebSafeLife\Views\_ViewImports.cshtml"
using WebSafeLife.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"67aee94f9bbee64ce71e10b7307f658c454dda6a", @"/Views/Agenda/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"883bb44f4da27a1ef35808282134df6714057043", @"/Views/_ViewImports.cshtml")]
    public class Views_Agenda_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "D:\Dracco\Safelife\Web.SafeLife\WebSafeLife\Views\Agenda\Index.cshtml"
  
    ViewData["Title"] = "Agenda";
    ViewData["Subtitle"] = "Seus Compromissos";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
            BeginContext(140, 4510, true);
            WriteLiteral(@"


<!-- fullCalendar -->
<link rel=""stylesheet"" href=""/lib/fullcalendar/dist/fullcalendar.min.css"">
<link rel=""stylesheet"" href=""/lib/fullcalendar/dist/fullcalendar.print.min.css"" media=""print"">

<!-- Main content -->
<section class=""content"">
    <div class=""row"">
        <div class=""col-md-3"">
            <div class=""box box-solid"">
                <div class=""box-header with-border"">
                    <h3 class=""box-title"">Criar compromisso</h3>
                </div>
                <div class=""box-body"">
                    <div class=""btn-group"" style=""width: 100%; margin-bottom: 10px;"">
                        <!--<button type=""button"" id=""color-chooser-btn"" class=""btn btn-info btn-block dropdown-toggle"" data-toggle=""dropdown"">Color <span class=""caret""></span></button>-->
                        <ul class=""fc-color-picker"" id=""color-chooser"">
                            <li><a class=""text-aqua"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class");
            WriteLiteral(@"=""text-blue"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-light-blue"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-teal"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-yellow"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-orange"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-green"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-lime"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-red"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-purple"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-fuchsia"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a clas");
            WriteLiteral(@"s=""text-muted"" href=""#""><i class=""fa fa-square""></i></a></li>
                            <li><a class=""text-navy"" href=""#""><i class=""fa fa-square""></i></a></li>
                        </ul>
                    </div>
                    <!-- /btn-group -->
                    <div class=""input-group"">
                        <input id=""new-event"" type=""text"" class=""form-control"" placeholder=""Título"">
                        <div class=""input-group-btn"">
                            <button id=""add-new-event"" type=""button"" class=""btn btn-primary btn-flat"">Adicionar</button>
                        </div>
                        <!-- /btn-group -->
                    </div>
                    <!-- /input-group -->
                </div>
            </div>
            <div class=""box box-solid"">
                <div class=""box-header with-border"">
                    <h4 class=""box-title"">Compromissos</h4>
                </div>
                <div class=""box-body"">
                    <!");
            WriteLiteral(@"-- the events -->
                    <div id=""external-events"">
                        <div class=""external-event bg-green"">Oftalmologista Joao</div>
                        <div class=""external-event bg-yellow"">Cardiologista Andre</div>
                        <div class=""external-event bg-aqua"">Corrida São Silvestre</div>
                        <div class=""external-event bg-light-blue"">Exames de laboratório</div>
                        <div class=""external-event bg-red"">Retorno no dentista</div>
                        <div class=""checkbox"">
                            <label for=""drop-remove"">
                                <input type=""checkbox"" class=""flat-green"" id=""drop-remove"">
                                Remover após adicionar na agenda
                            </label>
                        </div>
                    </div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /. box -->

        </div>
        <!-- /.col -->");
            WriteLiteral(@"
        <div class=""col-md-9"">
            <div class=""box box-primary"">
                <div class=""box-body no-padding"">
                    <!-- THE CALENDAR -->
                    <div id=""calendar""></div>
                </div>
                <!-- /.box-body -->
            </div>
            <!-- /. box -->
        </div>
        <!-- /.col -->
    </div>
    <!-- /.row -->
</section>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(4667, 7518, true);
                WriteLiteral(@"
    <!-- jQuery 3 -->
    <script src=""/lib/jquery/dist/jquery.min.js""></script>
    <!-- Bootstrap 3.3.7 -->
    <script src=""/lib/bootstrap/dist/js/bootstrap.min.js""></script>
    <!-- jQuery UI 1.11.4 -->
    <script src=""/lib/jquery-ui/jquery-ui.min.js""></script>
    <!-- Slimscroll -->
    <script src=""/lib/jquery-slimscroll/jquery.slimscroll.min.js""></script>
    <!-- FastClick -->
    <script src=""/lib/fastclick/lib/fastclick.js""></script>
    <!-- AdminLTE App -->
    <script src=""/js/adminlte.min.js""></script>
    <!-- AdminLTE for demo purposes -->
    <script src=""/js/demo.js""></script>
    <!-- fullCalendar -->
    <script src=""/lib/moment/moment.js""></script>
    <script src=""/lib/fullcalendar/dist/fullcalendar.min.js""></script>
    <!-- Page specific script -->
    <script>
        $(function () {

            /* initialize the external events
             -----------------------------------------------------------------*/
            function init_events(ele) {
       ");
                WriteLiteral(@"         ele.each(function () {

                    // create an Event Object (http://arshaw.com/fullcalendar/docs/event_data/Event_Object/)
                    // it doesn't need to have a start or end
                    var eventObject = {
                        title: $.trim($(this).text()) // use the element's text as the event title
                    }

                    // store the Event Object in the DOM element so we can get to it later
                    $(this).data('eventObject', eventObject)

                    // make the event draggable using jQuery UI
                    $(this).draggable({
                        zIndex: 1070,
                        revert: true, // will cause the event to go back to its
                        revertDuration: 0  //  original position after the drag
                    })

                })
            }

            init_events($('#external-events div.external-event'))

            /* initialize the calendar
             --");
                WriteLiteral(@"---------------------------------------------------------------*/
            //Date for the calendar events (dummy data)
            var date = new Date()
            var d = date.getDate(),
                m = date.getMonth(),
                y = date.getFullYear()
            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                buttonText: {
                    today: 'HOJE',
                    month: 'Mês',
                    week: 'Semana',
                    day: 'Dia'
                },
                //Random default events
                events: [
                    {
                        title: 'All Day Event',
                        start: new Date(y, m, 1),
                        backgroundColor: '#f56954', //red
                        borderColor: '#f56954' //red
                    },
");
                WriteLiteral(@"                   
                    {
                        title: 'Meeting',
                        start: new Date(y, m, d, 10, 30),
                        allDay: false,
                        backgroundColor: '#0073b7', //Blue
                        borderColor: '#0073b7' //Blue
                    },
                    {
                        title: 'Lunch',
                        start: new Date(y, m, d, 12, 0),
                        end: new Date(y, m, d, 14, 0),
                        allDay: false,
                        backgroundColor: '#00c0ef', //Info (aqua)
                        borderColor: '#00c0ef' //Info (aqua)
                    },
                    {
                        title: 'Birthday Party',
                        start: new Date(y, m, d + 1, 19, 0),
                        end: new Date(y, m, d + 1, 22, 30),
                        allDay: false,
                        backgroundColor: '#00a65a', //Success (green)
                     ");
                WriteLiteral(@"   borderColor: '#00a65a' //Success (green)
                    },
                    {
                        title: 'Click for Google',
                        start: new Date(y, m, 28),
                        end: new Date(y, m, 29),
                        url: 'http://google.com/',
                        backgroundColor: '#3c8dbc', //Primary (light-blue)
                        borderColor: '#3c8dbc' //Primary (light-blue)
                    }
                ],
                editable: true,
                droppable: true, // this allows things to be dropped onto the calendar !!!
                drop: function (date, allDay) { // this function is called when something is dropped

                    // retrieve the dropped element's stored Event Object
                    var originalEventObject = $(this).data('eventObject')

                    // we need to copy it, so that multiple events don't have a reference to the same object
                    var copiedEventObject = $");
                WriteLiteral(@".extend({}, originalEventObject)

                    // assign it the date that was reported
                    copiedEventObject.start = date
                    copiedEventObject.allDay = allDay
                    copiedEventObject.backgroundColor = $(this).css('background-color')
                    copiedEventObject.borderColor = $(this).css('border-color')

                    // render the event on the calendar
                    // the last `true` argument determines if the event ""sticks"" (http://arshaw.com/fullcalendar/docs/event_rendering/renderEvent/)
                    $('#calendar').fullCalendar('renderEvent', copiedEventObject, true)

                    // is the ""remove after drop"" checkbox checked?
                    if ($('#drop-remove').is(':checked')) {
                        // if so, remove the element from the ""Draggable Events"" list
                        $(this).remove()
                    }

                }
            })

            /* ADDING EVENTS *");
                WriteLiteral(@"/
            var currColor = '#3c8dbc' //Red by default
            //Color chooser button
            var colorChooser = $('#color-chooser-btn')
            $('#color-chooser > li > a').click(function (e) {
                e.preventDefault()
                //Save color
                currColor = $(this).css('color')
                //Add color effect to button
                $('#add-new-event').css({ 'background-color': currColor, 'border-color': currColor })
            })
            $('#add-new-event').click(function (e) {
                e.preventDefault()
                //Get value and make sure it is not null
                var val = $('#new-event').val()
                if (val.length == 0) {
                    return
                }

                //Create events
                var event = $('<div />')
                event.css({
                    'background-color': currColor,
                    'border-color': currColor,
                    'color': '#fff'
  ");
                WriteLiteral(@"              }).addClass('external-event')
                event.html(val)
                $('#external-events').prepend(event)

                //Add draggable funtionality
                init_events(event)

                //Remove event from text input
                $('#new-event').val('')
            })
        })
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
